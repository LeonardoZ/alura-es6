{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","negociacao","ConnectionFactory","getConnection","then","NegociacaoDao","connection","dao","adiciona","catch","Error","listarTodos","console","log","erro","apagar","listaAtual","obterNegociacoes","negociacoes","filter","some","isEquals","outra","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","reduce","arrayAchatado","array","concat","resolve","reject","get","map","Negociacao","Date","objeto","data","quantidade","valor"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  cadastrar(negociacao) {\n    return ConnectionFactory.getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.adiciona(negociacao))\n      .then(() => \"Negociação adicionada com sucesso\")\n      .catch(() => {\n        throw new Error(\"Não foi possível adicionar a negociação\");\n      });\n  }\n\n  listar() {\n    return ConnectionFactory.getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.listarTodos())\n      .catch(erro => {\n        console.log(erro);\n        throw new Error(\"Não foi possível listar as negociações\");\n      });\n  }\n\n  apagar() {\n    return ConnectionFactory.getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.apagar())\n      .then(() => \"Negociações apagadas com sucesso\")\n      .catch(erro => {\n        console.log(erro);\n        throw new Error(\"Não foi possível apagar as negociações\");\n      });\n  }\n\n  importa(listaAtual) {\n     return this.obterNegociacoes()\n       .then(negociacoes =>\n         negociacoes.filter(\n           negociacao =>\n             !listaAtual.some(outra => negociacao.isEquals(outra))\n         )\n       )\n       .catch(erro => {\n         console.log(erro);\n         throw new Error(\"Não foi possível buscar as negociações para importar\");\n       });\n  }\n\n  obterNegociacoes() {\n    return Promise.all([\n      this.obterNegociacoesDaSemana(),\n      this.obterNegociacoesDaSemanaAnterior(),\n      this.obterNegociacoesDaSemanaRetrasada()\n    ])\n      .then(negociacoes => {\n        return negociacoes.reduce(\n          (arrayAchatado, array) => arrayAchatado.concat(array),\n          []\n        );\n      })\n      .catch(erro => {\n        throw new Error(erro);\n      });\n  }\n\n  obterNegociacoesDaSemana() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get(\"negociacoes/semana\")\n        .then(negociacoes => {\n          resolve(\n            negociacoes.map(\n              objeto =>\n                new Negociacao(\n                  new Date(objeto.data),\n                  objeto.quantidade,\n                  objeto.valor\n                )\n            )\n          );\n        })\n        .catch(erro => {\n          console.log(erro);\n          reject(erro);\n        });\n    });\n  }\n\n  obterNegociacoesDaSemanaRetrasada() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get(\"negociacoes/retrasada\")\n        .then(negociacoes => {\n          resolve(\n            negociacoes.map(\n              objeto =>\n                new Negociacao(\n                  new Date(objeto.data),\n                  objeto.quantidade,\n                  objeto.valor\n                )\n            )\n          );\n        })\n        .catch(erro => {\n          console.log(erro);\n          reject(erro);\n        });\n    });\n  }\n\n  obterNegociacoesDaSemanaAnterior() {\n    return new Promise((resolve, reject) => {\n      this._http\n        .get(\"negociacoes/anterior\")\n        .then(negociacoes => {\n          resolve(\n            negociacoes.map(\n              objeto =>\n                new Negociacao(\n                  new Date(objeto.data),\n                  objeto.quantidade,\n                  objeto.valor\n                )\n            )\n          );\n        })\n        .catch(erro => {\n          console.log(erro);\n          reject(erro);\n        });\n    });\n  }\n}\n"]}