{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","conexao","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","console","log","onerror","error","name","connection","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AACXC,a,GAAU,I;AACVC,W,GAAQ,I;;mCAECC,iB;AACX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;AAGAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAAChB,OAAL,EAAc;AACZA,4BAAUa,EAAEC,MAAF,CAASC,MAAnB;AACAd,0BAAQD,QAAQC,KAAR,CAAcgB,IAAd,CAAmBjB,OAAnB,CAAR;AACAA,0BAAQC,KAAR,GAAgB,YAAW;AACzBiB,4BAAQC,GAAR,CAAY,4CAAZ;AACD,mBAFD;AAGD;AACDd,wBAAQL,OAAR;AACD,eATD;AAUAO,0BAAYa,OAAZ,GAAsB,aAAK;AACzBF,wBAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aApBM,CAAP;AAqBD;;;wCAEoBC,U,EAAY;AAC/B1B,mBAAO2B,OAAP,CAAe,iBAAS;AACtB,kBAAID,WAAWE,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC/CJ,2BAAWK,iBAAX,CAA6BD,KAA7B;AACD;AACDJ,yBAAWM,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aALD;AAMD;;;4CAEwB;AACvB,gBAAI9B,OAAJ,EAAa;AACXC;AACAD,wBAAU,IAAV;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\nconst version = 4;\nconst dbName = \"aluraframe\";\nlet conexao = null;\nlet close = null;\n\nexport class ConnectionFactory {\n  constructor() {\n    throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\n  }\n\n  static getConnection() {\n    return new Promise((resolve, reject) => {\n      let openRequest = window.indexedDB.open(dbName, version);\n\n      openRequest.onupgradeneeded = e => {\n        ConnectionFactory._createStores(e.target.result);\n      };\n      openRequest.onsuccess = e => {\n        if (!conexao) {\n          conexao = e.target.result;\n          close = conexao.close.bind(conexao);\n          conexao.close = function() {\n            console.log(\"Você não pode fechar diretamente a conexão\");\n          };\n        }\n        resolve(conexao);\n      };\n      openRequest.onerror = e => {\n        console.log(e.target.error);\n        reject(e.target.error.name);\n      };\n    });\n  }\n\n  static _createStores(connection) {\n    stores.forEach(store => {\n      if (connection.objectStoreNames.contains(store)) {\n        connection.deleteObjectStore(store);\n      }\n      connection.createObjectStore(store, { autoIncrement: true });\n    });\n  }\n\n  static closeConnection() {\n    if (conexao) {\n      close();\n      conexao = null;\n    }\n  }\n}\n"]}