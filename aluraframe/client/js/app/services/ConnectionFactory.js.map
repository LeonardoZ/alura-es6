{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","conexao","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","console","log","onerror","error","name","connection","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAClC,MAAIC,SAAS,CAAC,aAAD,CAAb;AACA,MAAIC,UAAU,CAAd;AACA,MAAIC,SAAS,YAAb;AACA,MAAIC,UAAU,IAAd;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AACE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAHH;AAAA;AAAA,sCAKyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAFD;AAGAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACf,OAAL,EAAc;AACZA,wBAAUY,EAAEC,MAAF,CAASC,MAAnB;AACAb,sBAAQD,QAAQC,KAAR,CAAce,IAAd,CAAmBhB,OAAnB,CAAR;AACAA,sBAAQC,KAAR,GAAgB,YAAW;AACzBgB,wBAAQC,GAAR,CAAY,4CAAZ;AACD,eAFD;AAGD;AACDd,oBAAQJ,OAAR;AACD,WATD;AAUAM,sBAAYa,OAAZ,GAAsB,aAAK;AACzBF,oBAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAID,SApBM,CAAP;AAqBD;AA3BH;AAAA;AAAA,oCA6BuBC,UA7BvB,EA6BmC;AAC/BzB,eAAO0B,OAAP,CAAe,iBAAS;AACtB,cAAID,WAAWE,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC/CJ,uBAAWK,iBAAX,CAA6BD,KAA7B;AACD;AACDJ,qBAAWM,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,SALD;AAMD;AApCH;AAAA;AAAA,wCAsC2B;AACvB,YAAI7B,OAAJ,EAAa;AACXC;AACAD,oBAAU,IAAV;AACD;AACF;AA3CH;;AAAA;AAAA;AA8CD,CArDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["let ConnectionFactory = (function() {\n  let stores = [\"negociacoes\"];\n  let version = 4;\n  let dbName = \"aluraframe\";\n  let conexao = null;\n  let close = null;\n\n  return class ConnectionFactory {\n    constructor() {\n      throw new Error(\"Não é possível criar instâncias de ConnectionFactory\");\n    }\n\n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        let openRequest = window.indexedDB.open(dbName, version);\n\n        openRequest.onupgradeneeded = e => {\n          ConnectionFactory._createStores(e.target.result);\n        };\n        openRequest.onsuccess = e => {\n          if (!conexao) {\n            conexao = e.target.result;\n            close = conexao.close.bind(conexao);\n            conexao.close = function() {\n              console.log(\"Você não pode fechar diretamente a conexão\");\n            };\n          }\n          resolve(conexao);\n        };\n        openRequest.onerror = e => {\n          console.log(e.target.error);\n          reject(e.target.error.name);\n        };\n      });\n    }\n\n    static _createStores(connection) {\n      stores.forEach(store => {\n        if (connection.objectStoreNames.contains(store)) {\n          connection.deleteObjectStore(store);\n        }\n        connection.createObjectStore(store, { autoIncrement: true });\n      });\n    }\n\n    static closeConnection() {\n      if (conexao) {\n        close();\n        conexao = null;\n      }\n    }\n  };\n\n})();\n"]}